#! /usr/bin/env python
# -*- coding: utf-8 -*-

import optparse
import sys
import os
import pbs

from os.path import basename, isfile, exists, normpath
from os import environ, path

"""
Import optcomplete
"""
try:
  import optcomplete

  NoneCompleter = optcomplete.NoneCompleter
  CmdComplete = optcomplete.CmdComplete
except ImportError:
  optcomplete = None


"""
Import lib
"""
sys.path.append(sys.path[0] + '/..')

from lib.motes import MotesInstaller, Motes, CommandLogger, CommandError, ListCommand


"""
Require minimum Python version
"""
if sys.version_info < (2, 7):
  CommandError('Wrong Python Version!\n  >= 2.7 is required.').exe()


"""
Auotcomplete motes files
"""
class FilesCompleter:
  
  def __init__(self, motes_path):
    self.path = motes_path

  def __call__(self, pwd, line, point, prefix, suffix):
    lc = ListCommand(self.path, False)
    files = lc.files()

    files_list = []

    for idx, file in enumerate(files):
      files_list.append(file)

    return files_list


"""
Map autocomplete to optionparser
"""
def map_autocomplete(parser, file_path):
  cmd_map = {}

  for n in Motes.commands():
    cmd_map[n] = Motes.commands()[n]
  
  cmd_lister = optcomplete.ListCompleter(cmd_map.keys())
  fc = FilesCompleter(file_path)

  optcomplete.autocomplete(parser, cmd_lister, NoneCompleter(), fc, subcommands=cmd_map)


"""
Main routine
"""
def main():
  usage = 'Usage: %prog [command] [options]'

  parser = optparse.OptionParser(usage, prog='Motes', version='%prog version 0.1')

  parser.add_option('-p', '--path', action='store_true', help='prints motes folder path')
  parser.add_option('-k', '--kitten', action='store_true', help='show me a kitten')

  mi = MotesInstaller(path.abspath(path.dirname(__file__)))

  try:
    if not mi.installed():
      mi.install()

    if optcomplete:
      map_autocomplete(parser, mi.path)

    (options, arguments) = parser.parse_args()

    if options.path:
      CommandLogger('Motes home directory: \n', True)
      CommandLogger(mi.path)

    elif options.kitten:
      pbs.open('http://placekitten.com/800/600')

    else:
      if len(arguments) < 1:
        CommandError('Insufficient arguments given.').exe()

      else: # Launch command
        m = Motes(mi.path, arguments[0], arguments[1::])
  except KeyboardInterrupt:
    CommandLogger('Motes quit', True)

    pass


"""
Default init
"""
if __name__ == '__main__':
  main()
